*neomake.txt*	For Vim version 7.4 and Neovim	Last change: Jan 22 2016

    _/      _/                                                _/               ~
   _/_/    _/    _/_/      _/_/    _/_/_/  _/_/      _/_/_/  _/  _/      _/_/  ~
  _/  _/  _/  _/_/_/_/  _/    _/  _/    _/    _/  _/    _/  _/_/      _/_/_/_/ ~
 _/    _/_/  _/        _/    _/  _/    _/    _/  _/    _/  _/  _/    _/        ~
_/      _/    _/_/_/    _/_/    _/    _/    _/    _/_/_/  _/    _/    _/_/_/   ~

        Runs make tasks and syntax checkers asynchronously (for neovim)
                         and simply (for all the vims)!

==============================================================================
CONTENTS                                                      *neomake-contents*

1. Introduction                                           |neomake-introduction|
2. Commands                                                   |neomake-commands|
3. Configuration                                         |neomake-configuration|
4. Functions                                                 |neomake-functions|

==============================================================================
1. Introduction                                           *neomake-introduction*

Neomake leverages neovim's |job-control| feature where available to run
programs like syntax checkers asynchronously. Where job control is not
available, it resorts to a synchronous |system()| call, making it possible to
run this plugin in both vim and neovim. This plugin is heavily inspired by
fantastic vim plugins such as syntastic and dispatch.

==============================================================================
2. Commands                                                   *neomake-commands*

                                         *neomake-:Neomake* *neomake-:NeomakeFile*
:Neomake [makers]       Run a make command with the current file as input. If
                        no makers are specified, the default makers for the
                        current |filetype| are used. See |neomake-configuration|
                        for more on makers.

                                     *neomake-:Neomake!* *neomake-:NeomakeProject*
:Neomake! [makers]      Run a make command with no file as input. If no makers
                        are specified, the default top-level makers will be
                        used. If no default top-level makers exist, |makeprg|
                        will be used.

                                                            *neomake-:NeomakeSh*
:NeomakeSh {command}    Run {command} in a shell (according to 'shell'). The
                        command output will be loaded in the quickfix list when
                        the job is complete. Example:
                        :NeomakeSh find . -name '*.pyc'

                                                      *neomake-:NeomakeListJobs*
:NeomakeListJobs        List all running jobs in the format: >
                        job_id job_name
<
                                                     *neomake-:NeomakeCancelJob*
:NeomakeCancelJob *{job_id}*
                        Sends a 'jobstop' to *job_id* which terminates the job.

==============================================================================
3. Configuration                                         *neomake-configuration*

If you just want an easy way to run |:make| asynchronously, you're all set.
Just set your |makeprg| and |errorformat| as usual, and run |:Neomake!|. If
you want more, read on.

Makers                                                          *neomake-makers*
A maker is an object that tells neomake how to run a job for you. A maker may
be run with a file as input (great for linting), or with no file as input
(great for building, project-level tasks).

Here is a sample maker definition: >
    let g:neomake_make_maker = {
        \ 'exe': 'make',
        \ 'args': ['--build'],
        \ 'errorformat': '%f:%l:%c: %m',
        \ }
    " Use the maker like this:
    :Neomake! make
<
All 'args' will be |expand()|ed: >
    let g:neomake_lint_maker = {
        \ 'exe': 'lint',
        \ 'args': ['%:p'],
        \ }
<
Running "|:Neomake!| lint" from file.txt would cause "lint /path/to/file.txt" to
be run.

In the above example, the exe argument isn't strictly necessary, since neomake
uses the name of the maker as the default value for it.  If you want it to be
usable on an individual file, you should also include the filtype in the name: >
    let g:neomake_c_lint_maker = {
        \ 'exe': 'lint',
        \ 'args': ['--option', 'x'],
        \ 'errorformat': '%f:%l:%c: %m',
        \ }
    " Use this maker from a c file:
    :Neomake lint
    " Or use it on the whole project:
    :Neomake! c_lint
<
                                     *neomake-{{makepath}}* *neomake-!!makepath!!*
When running a maker on a file with |:Neomake|, you may want to control where
in the 'args' list the file's path will appear. To do this, insert '%:p' in
the 'args' list. {{makepath}} and !!makepath!! are no longer used for this,
but will be retained in the docs for discoverability: >
    let g:neomake_c_lint_maker = {
        \ 'exe': 'lint',
        \ 'args': ['%:p', '--option', 'x'],
        \ 'errorformat': '%f:%l:%c: %m',
        \ }
<
This will cause "lint /path/to/file.c --option x" to be run instead of
"lint --option x /path/to/file.c".

The file path can be excluded from the argument list entirely by setting the
'append_file' argument to 0. >
    let g:neomake_c_lint_maker = {
        \ 'exe': 'lint',
        \ 'args': ['--option', 'x'],
        \ 'append_file': 0,
        \ 'errorformat': '%f:%l:%c: %m',
        \ }
<
This can be useful for makers that are filetype dependent but are typically
run on an whole project rather than a specific file.

                                                     *neomake-makers-processing*
You can define two optional properties on a maker object to process the maker
output: 'mapexpr' is applied to the maker output before any processing, and
'postprocess' is applied to the quickfix or location list entry.

The 'mapexpr' property will be passed directly into |map| as the expr argument like so: >
    call map(lines, maker.mapexpr)
<where 'lines' contains the maker output.
This allows you to manipulate the lines as needed. Currently this is called
on stdout and stderr lines alike.

The 'postprocess' property is a function reference that will be applied to the
entry in the location or quickfix list.
Example: change the entry type to a warning. >
    function SetWarningType(entry)
        a:entry.type = 'W'
    endfunction
    let g:neomake_c_lint_maker = {
        \ 'exe': 'lint',
        \ 'args': ['--option', 'x'],
        \ 'errorformat': '%f:%l:%c: %m',
        \ 'postprocess': function('SetWarningType')
        \ }
<
                                                  *neomake-makers-buffer_output*
Some makers with multiline error messages have issues (depending on how they
flush their output). If multiline errorformats seem to work inconsistently for
a maker, try setting buffer_output to 1: >
    let g:neomake_ft_test_maker = {
        \ 'exe': 'some-maker',
        \ 'errorformat': '%EError,%Cline %l,%Z%m',
        \ 'buffer_output': 1
        \ }
<
This tells the maker only to process output when either the output type
changes (from stderr to stout or vice versa) or at the end of the job. Your
results will take longer, but multiline error messages should parse properly.

				         *neomake-makers-remove_invalid_entries*
Makers can filter invalid entries (e.g. entries that do not match the
|errorformat|) in the location/quickfix list. Set the 'remove_invalid_entries'
property to 0 to keep all the maker output in the list:
    let g:neomake_ft_maker_remove_invalid_entries = 0
<

                                                            *neomake-makers-cwd*
The working directory used to run a maker can be changed by setting its 'cwd'
property: >
        let g:neomake_my_example_maker = {
        \ 'exe': 'pwd',
        \ 'cwd': '%:p:h'
        \ }
<

Global Options                                                 *neomake-options*

*g:neomake_<name>_maker* *g:neomake_<ft>_<name>_maker*
Define a new filetype or project-level maker. See |neomake-makers|.

*g:neomake_<name>_<property>* *g:neomake_<ft>_<name>_<property>*
Configure a property for a prexisting maker where property is one of 'exe',
'args', 'errorformat' or 'buffer_output'. Can also be set by buffer. Example: >
    let g:neomake_javascript_jshint_exe = './myjshint'
    let b:neomake_javascript_jshint_exe = './myotherjshint'
<
*g:neomake_<ft>_enabled_makers*
This setting will tell neomake which makers to use by default for the given
filetype. Filetypes that have already have makers should have a default list
of makers already. Example: >
    let g:neomake_python_enabled_makers = ['pep8', 'pylint']
<
*g:neomake_enabled_makers*
This setting will tell neomake which makers to use by default when not
operating on a single file. This effectively defaults to: >
    let g:neomake_enabled_makers = ['makeprg']
<
*g:neomake_open_list*
This setting will open the |loclist| or |quickfix| list (depending on whether
it is operating on a file) when adding entries. A value of 2 will preserve the
cursor position when the |loclist| or |quickfix| window is opened. Defaults to 0.

*g:neomake_list_height*
The height of the |loclist| or |quickfix| list opened by neomake.
Defaults to 10.

*g:neomake_echo_current_error*
This setting will echo the error for the line your cursor is on, if any.
Defaults to 1.

*g:neomake_serialize*
Setting this to 1 tells neomake to run each enabled maker one after the other.
This is a good way to ensure messages don't get mixed up. When Neovim's
|job-control| feature implements a way to get the exit status of a job, an
option will be added to stop after the first failing job as well.

*g:neomake_serialize_abort_on_error*
Setting this to 1 tells neomake to abort after the first error status is
encountered. This setting only works when |g:neomake_serialize| is on.

*g:neomake_verbose*
Controls how verbose neomake should be. Neomake log levels are as follows:
    0 - Errors only
    1 - Quiet message (default -- should only log one message at a time)
    2 - Loud message (may log multiple messages at once, making the screen
        shift momentarily)
    3 - Debug information, normally relevant only to people who develop
        neomake.
Each log level includes all the levels before it.

*g:neomake_logfile*
Specify a logfile where all log messages will be logged. The setting
|g:neomake_verbose| does not influence which messages will be logged to file,
making it possible to reduce the number of messages you see in your editor
without losing that information should you need it. Mainly for people hacking
on neomake itself. This feature is not yet cross-platform.

*g:neomake_place_signs*
This setting will tell neomake whether to place signs by errors recognized
from the |errorformat|. Defaults to 1.

*g:neomake_error_sign* *g:neomake_warning_sign*
These options allow you to control the appearance of the signs that are
placed beside errors and warnings respectively. These are dictionaries that
represent the parameters provided by |sign-define|. Here is an example
definition: >
    let g:neomake_error_sign = {
        \ 'text': 'E>',
        \ 'texthl': 'ErrorMsg',
        \ }
<
See the |:highlight| command to list the highlight groups available to you or
create new ones.

*g:neomake_airline*
Shows the output returned by |neomake#statusline#LoclistStatus| in the warning
section of the vim-airline |statusline|. Defaults to 1.

==============================================================================
4. Functions                                                 *neomake-functions*

This list is non-exhaustive at the moment, but you may find some of these
functions useful.

*neomake#Make* (filemode, makers[, callback])
This function is called by |:Neomake(!)| command. It runs all the *makers*
specified, in order. If *filemode* is 1, then the current file is used as input
to the makers. |neomake#Make| returns an array of the job ids that it creates
via 'jobstart'; you can potentially cancel these jobs with |neomake#CancelJob|.

It also accepts a third, optional callback argument that
is called when the command exits.  The callback is given the following
dictionary as its sole argument: >
    { 'status': <exit status of maker>,
    \ 'name': <maker name>,
    \ 'has_next': <true if another maker follows, false otherwise> }

*neomake#Sh* (command[, callback])
This function is called by the |:NeomakeSh| command. It runs the specified
shell *command* according to 'shell'. |neomake#Sh| returns the single job id
that it creates via 'jobstart'; you can potentially cancel this job with
|neomake#CancelJob|.

It also accepts a second, optional
callback argument that is called when the command exits. The callback is
given the following dictionary as its sole argument: >
    { 'status': <exit status of command>,
    \ 'name': 'sh: <command>',
    \ 'has_next': false }

*neomake#ListJobs*
Invoked via |:NeomakeListJobs|. Echoes a list of running jobs in the format
(job_id, job_name).

*neomake#CancelJob*
Invoked via |:NeomakeCancelJob|. Sends a 'jobstop' to the job id specified.
Will trigger callback if it was specified when the job was started.
Example: >
    let job_id = neomake#Sh("bash -c 'while true; do sleep 1; done'")
    call neomake#CancelJob(job_id)

*neomake#signs#RedefineErrorSign* *neomake#signs#RedefineWarningSign*
These functions define the error sign and the warning sign respectively. They
optionally take a dictionary in the same format as |g:neomake_error_sign|. If
no such dictionary is provided, the default values will be used. These
functions may be useful if somehow |:Neomake| is being invoked before you
define |g:neomake_error_sign|. >
    let g:neomake_error_sign = {'text': 'D:'}
    call neomake#utils#RedefineErrorSign()
<
                                                            *neomake-statusline*
*neomake#statusline#LoclistStatus* *neomake#statusline#QflistStatus*
These functions return text for your |statusline|. They each take an optional
first argument, which is the prefix text that will be shown if errors or
warnings exist. Example usage: >
    set statusline+=\ %#ErrorMsg#%{neomake#statusline#QflistStatus('qf:\ ')}
<
The result of this will be something like 'qf: E:1, W:2' if there are errors
or warnings and the empty string otherwise.

*neomake#statusline#LoclistCounts* *neomake#statusline#QflistCounts*
These functions get the counts of errors by error type for the |location-list|
and the |quickfix| respectively. The return value is something like this: >
    {'E': 2, 'W': 1, 'x': 5}
<Where 'E', 'W' and 'x' are error types. Empty error types are ignored for
now.

*neomake#ProcessCurrentBuffer*
This is the function that takes the job output and puts it into the loclist or
qflist, adds signs, etc. Currently, if you stay in the buffer you called
|:Neomake| from, this will happen as the job output comes in. However, if you go
to a different buffer, neomake will wait until you return to that buffer for
the job output to be processed. Currently, that will happen on |BufEnter| and
|CursorHold|. You can also call this function directly if you need to force
it. This function is not currently used for |:Neomake!|, which always
processes its output as it arrives.

vim: ft=help tw=78
