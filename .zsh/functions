# vim:ft=zsh
# File to save custom functions

# ls right after cd
function chpwd()
{
    emulate -L zsh
    ls
}

# command not found
function command_not_found_handler() {
    echo "\nDonâ€™t pretend you want to talk to me, I know you hate me." 
    printf "So you really want me to search the database? (y/N): " && read search
    if [[ $search == "y" || $search == "Y" ]]; then
        if yaourt --color -Ss $@ > ~/tmp.txt; then
            cat ~/tmp.txt | head && rm ~/tmp.txt
            echo "\nHere I am, brain the size of a planet, and you ask me search the database? Call that job satisfaction, 'cause I don't."
        else
            head -n -1 ~/.zsh_history > ~/new_hist && mv ~/new_hist ~/.zsh_history
            echo "\nI think you ought to know I'm feeling very depressed."
        fi
    else
        head -n -1 ~/.zsh_history > ~/new_hist && mv ~/new_hist ~/.zsh_history
        echo "\nI think you ought to know I'm feeling very depressed."
    fi
}

# calculator
function calc() {
awk "BEGIN { print $* }"
}

# vim with server if necessary
function vim {
    eval last=\$$#
    if echo $last | grep ".tex\|.m\|.mma" > /dev/null; then
        command vim --servername VimServer $@
    elif echo $last | grep ".c" > /dev/null; then
        command vim --servername VimServer 2> /dev/null $@
    else
        command vim $@
    fi
}

# favourite command
function favcmd() {
    history|awk '{print $2}'|awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c|sort -rn|head -$1
}

# Create directory and enter it
function mkcd(){ mkdir "$1" && cd "$1" ; }

# Image renaming
function listjpg(){ autoload -U zmv && c=1 base="$1" zmv '*.JPG||*.jpg' '${base}_${(l:3::0:)$((c++))}.jpg' ; }
function listall(){ autoload -U zmv && c=1 base="$1" end="$2" zmv '*' '${base}_${(l:3::0:)$((c++))}.${end}' ; }

# Mathematica kernel to solve input
function m() {
echo $@ | math | grep "Out" | cut -d " " -f2
}

# Nice short cpu process overview
function pscpu() {
    ps -e -o pcpu,cpu,nice,state,cputime,args | sort -k1 -nr | head -n 3 | awk '{print $1"%  "$5"  "$6" "$7}'
}

# Remove all spaces
function killws() {
    for a in ./**/*\ *(Dod); do 
    printf "Clean $a? (Y/n): " && read input
    if [[ $input == "Y" || $input == "y" ]]; then
        mv $a ${a:h}/${a:t:gs/ /_};
        echo "Cleaned $a"
    else
        echo "Ignored $a"
    fi
    done
}

# Up we go (nicer than ...)
function up() {
    for (( i = 0; i < $1; i++ )); do
        cd .. 1>/dev/null
    done
    ls
}

function chmod_format() {
  sed 's/.\(.........\).*/\1/
    h;y/rwsxtSTlL-/IIIIIOOOOO/;x;s/..\(.\)..\(.\)..\(.\)/|\1\2\3/
    y/sStTlLx-/IIIIIIOO/;G
    s/\n\(.*\)/\1;OOO0OOI1OIO2OII3IOO4IOI5IIO6III7/;:k
    s/|\(...\)\(.*;.*\1\(.\)\)/\3|\2/;tk
    s/^0*\(..*\)|.*/\1/;q'
}
